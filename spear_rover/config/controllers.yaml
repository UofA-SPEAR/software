drive_controller:
    # Copied from urdf_sim_tutorial package

    type: "diff_drive_controller/DiffDriveController"
    publish_rate: 50

    left_wheel: ['link_wheel_backleft', 'link_wheel_frontleft']
    right_wheel: ['link_wheel_backright', 'link_wheel_frontright']

    # DiffDriveController isn't really meant for skid-steering, so it doesn't
    # understand that the robot is actually turning much slower than it is asked
    # to (DiffDriveController is using open loop control). To compensate for this,
    # use a model with a much larger wheel separation distance, which will move
    # the wheels faster during turns.
    # This works in simulation. Not sure if this value is still appropriate for the
    # real robot, but we can worry about that when we start using
    # DiffDriveController for the real robot.
    wheel_separation_multiplier: 3.0

    # Odometry covariances for the encoder output of the robot. These values should
    # be tuned to your robot's sample odometry data, but these values are a good place
    # to start
    pose_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03]
    twist_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03]

    # Top level frame (link) of the robot description
    base_frame_id: base_link

    # Disable odom transform from diffdrive to remove conflict with robot_localization
    enable_odom_tf: false

    # Velocity and acceleration limits for the robot
    linear:
        x:
            has_velocity_limits    : true
            max_velocity           : 3.0   # m/s
            has_acceleration_limits: true
            max_acceleration       : 9.0   # m/s^2
    angular:
        z:
            has_velocity_limits    : true
            max_velocity           : 2.0   # rad/s
            has_acceleration_limits: true
            max_acceleration       : 6.0   # rad/s^2

arm_controller:
    type: position_controllers/JointTrajectoryController
    joints:
        - shoulder_yaw
        - shoulder_pitch
        - elbow_pitch
        - wrist_pitch
        - wrist_roll

# This is called a "controller" but is not. It is actually way to publish
# the arm/wheel joint angles to /joint_states, since the controllers don't do
# that themselves.
joint_state_controller:
    type: joint_state_controller/JointStateController
    publish_rate: 50
